
                           ======================
                                  README
                           ======================

========================================================================================
Welcome to CPSC453 Assignment 3!


Student Name: James Donald Thorne
Student ID:   10018506


Target Platform:
   This assignment has been tested to run on the computers in MS239.


Compiling and Running:
   To compile and run this assignment, go to the assignment folder and type:

   $ make
   $ ./assignment3


Brief User Manual:
   To use this assignment, run the application, select a scene, and click "Render".
   The scene will be rendered, and displayed in the window as it is completed.  

   Once the render is complete, you can optionally save it by clicking "Save Image".


   You can also create additional scenes by creating and editing ".scene" files.  Please
   take a look at the included sample files for reference; the file format is generally:

      ObjectType: Property = Value, Property = Value, Property = Value

   Possible objects are:

      Material: Name = [x], Diffuse = [r], [g], [b], DiffuseK = [k], Specular = [r], [g], [b], SpecularK = [k], SpecularAlpha = [a], Reflectance = [r], Refraction = [r], Transparency = [a]

      Triangle: P1 = [x], [y], [z]; P2 = [x], [y], [z]; P3 = [x], [y], [z]; Material = [material]
      Quad: P1 = [x], [y], [z]; P2 = [x], [y], [z]; P3 = [x], [y], [z]; P4 = [x], [y], [z]; Material = [material]
      Light: Position = [x], [y], [z]; Color = [r], [g], [b]
      Cylinder: Position = [x], [y], [z]; Normal = [x], [y], [z]; Height = [h]; Radius = [r]; Material = [material]
      Sphere: Position = [x], [y], [z]; Radius = [r]; Material = [material]


Data-Structures Used:
   Color
      This structure represents a rgb color, with three color channels (r, g, b) stored as
      double-precision floating point values between 0.0 and 1.0.

   Ray
      The Ray structure represents a single ray being traced.  It consists of a start point
      (represented by a vector), and a direction (represented by a unit vector).

   RayIntersection
      The RayIntersection structure represents a ray intersecting with an object.  This structure
      holds the incoming ray, intersection point, surface normal, and material at the intersection
      point.  It also provides several convenience functions, e.g. reflectedRay().

   PossibleRayIntersection
      This structure allows us to represent either an intersection, or a lack of intersection,
      without having to deal with null pointers.

   Vector
      This structure represents a simple three-dimensional vector.  The vector is stored as
      three discrete double values, 'x', 'y' and 'z'.

   Group
      A "group" is a collection of objects, that can be treated as a single object.  This allows
      us to glue e.g. multiple triangles together into a single mesh.

   SceneObject (and Sphere, Cylinder, Triangle, Quad)
      Various objects, each of which are responsible for calculating ray intersections,
      knowing their material, and knowing their dimensions.  See the algorithms section below
      for more details.

   Scene
      A scene is a top-level group, which also includes lights, and functionality to read itself
      in from a file.

   PropertyList
      PropertyList is a simple structure which allows easy parsing of definition strings like
      "Property = a, b, c; Property2 = value".

   QList
      Provided by Qt, QList<> is a templated data structure which stores elements in either
      an array of pointers or an array of items, depending on the item's size.

      More information is available in the Qt documentation:
      http://doc.qt.digia.com/4.7/qlist.html

   QMap
      Provided by Qt, QMap<> is a templated data structure that stores elements in a 
      skip-list based dictionary.  It is used primarily to store calculated normals of
      vertices and faces.

      More information is available in the Qt documentation:
      http://doc.qt.digia.com/4.7/qmap.html


Algorithms Used
   Ray-Sphere Intersection
      Intersection between rays and spheres are calculated by equating the ray equation

         p = tx + o

      and the sphere equation

         r = |p - c|

      and then solving for the ray distance parameter t, resuling in the equation:

         t = (x dot c) +- sqrt[ (x dot c)^2 - c^2 + r^2 ]

      If the value inside the square root is negative, there is no solution.  If the
      value is zero, the intersection point is exactly (x dot c) units from the ray's
      origin, and if there are multiple solutions, the closest non-zero solution is used.

      The surface normal of the sphere is calculated by finding the vector from the sphere's 
      center to the intersection point, and normalizing it.

   Ray-Cylinder Intersection 
      Similar to ray-sphere intersection, this algorithm equates the ray equation 

         p = tx + o

      and the axis-aligned cylinder equation

         p_x^2 + p_z^2 = r^2

      and then solving for the ray distance parameter t, resulting in the equation:

         a = p_x^2 + p_z^2
         b = 2(s_x)(p_x) + 2(s_z)(p_z)
         c = s_x^2 + s_z^2 - r

         t = -b +- sqrt[ b^2 - 4ac ] / 2a

      If the value inside the square root is negative, there is no solution.  If the
      value is zero, the intersection point is exactly (x dot c) units from the ray's
      origin, and if there are multiple solutions, the closest non-zero solution is used.

      The surface normal of the cylinder is calculated by finding the vector between the 
      cylinder's axis and the intersection point, and normalizing it.

   Ray-Triangle Intersection
      This is a two-step algorithm, first using the plane equation to determine where an
      intersection exists, and then using the area solving technique to determine if the
      intersection point is within the triangle.

      The intersection point is found through the equation

         t = ( (p - o) dot n ) / (x dot n);

      If the numerator is zero, or the distance is <0, no intersection is found.

      Once the intersection is found, we calculate the area of intersection by summing
      the unit vectors between the intersection point, and each of the triangle's three
      vertices.

         a = |normalized(p - p1) + normalized(p - p2) + normalized(p - p3)|;

      if a > 1, we conclude the intersection point is outside of the triangle, and no result
      is returned.

      The surface normal of the triangle is found from the cross-product of two of its
      edges (e.g. (p2-p1) x (p3-p1) ), similar to how normals were calculated for the md2
      loader in Assignment 2.

   Phong Lighting and Shadows
      Surface colors are calculated by casting a ray to each light.

      - If the ray intersects an object first, we conclude the surface is in shadow, and only 
        a constant ambient light is applied

      - If the ray reaches the light, then diffuse and specular lighting is calculated using
        the Phong lighting equation:

        diffuse = diffuseColor * lightColor * diffuseIntensity 
                  * ( lightVector dot surfaceNormal )

        specular = specularColor * lightColor * specularIntensity 
                   * (reflectedVector dot viewportVector) ^ specularSpread

   Reflection
      After the surface color of a ray is calculated, a ray reflecting from the surface
      is created and traced, and its color calculated.  The color of the reflection ray is
      then added to the surface color of the initial ray.

         trace := lightColor + trace(reflectedRay)

      Once a maximum recursion depth is reached, the reflected rays are assumed to be
      black.

   Refraction
      Similar to reflection, transparent surfaces have an additional ray cast through them,
      using the snell refraction equation

         cosi = -incoming dot normal
         cost2 = 1 - (refractionIndex^2 * (1 - cosi^2))
         ray = (incoming * refractionIndex) + (normal * refractionIndex * cosi * sqrt(|cost2|))

      This ray is then followed through the object.  Once it hits the outer edge, it is
      refracted again (using a negative normal and inverse refractionIndex), and the determined
      color is added to the original surface.

         trace := lightColor + trace(reflectedRay) + trace(refractedRay)


Implemented Requirements:
   I have implemented all of the required functional requirements listed in the assignment 
   description, as well as several bonus ones.


   The requirements I have implemented are listed below:

   == Requirement ==                                              == Associated File (samples/) ==
   - Objects in the Scene
      - Spheres                                                      spheres.png
      - Triangles and Quads                                          triangle.png, spheres.png
   - Phong Lighting Model and Point Light Sources
      - Support for dynamic light positions and colors               spheres.png
      - Support for Phong lighting                                   triangle.png
   - Shadows                                                         spheres.png
   - Reflection (recursive to 5 levels)                              spheres.png

   I have also implemented several bonus requirements:

   == Requirement ==                                              == Associated File (samples/) ==
   - Scene and light specification read from input file              see ".scene" files
   - Refraction (recursive)                                          refraction.png
   - Cylinder primitive (only when aligned along the y-axis)         cylinders.png



Supplied Sample Images:
   All images are supplied in the "samples/" folder.  They are:
   
   samples/spheres.png
      Demonstrates quads, spheres, colored lighting, shadows and reflection

   samples/triangle.png
      Demonstrates triangles, spheres, specular and diffuse lighting, and reflection

   samples/cylinders.png
      Demonstrates axis-aligned cylinders, colored lighting, shadows and reflection

   samples/refraction.png
      Demonstrates refraction, reflection, spheres, cylinders, lights, shadows and reflection


Reused Code:
   This assignment is entirely my own work, except for the following items:

   - Vector.cxx and Vector.h, reused and enhanced from my Assignment 2 submission.

   Note that I did NOT use the provided GraphicsGems code to implement cylinders;
   I implemented them entirely on my own, in order to maximize my learning.

