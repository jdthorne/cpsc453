
                           ======================
                                  README
                           ======================

========================================================================================
Welcome to CPSC453 Assignment 2!


Student Name: James Donald Thorne
Student ID:   10018506


Target Platform:
   This assignment has been tested to run on the computers in MS239.


Compiling and Running:
   To compile and run this assignment, go to the assignment folder and type:

   $ make
   $ ./assignment2


Brief User Manual:
   To use this assignment, simply run the binary (./assignment2).  The various things
   you can play with are presented in the right-hand sidebar:

   Model Selection
      Here you can select your model.  You can choose a pre-packaged model from the list,
      or click "custom..." to load any model on the filesystem.

      Custom models can be loaded using the "Custom Model Selection" frame.  You can select
      a model, skin, weapon model, and weapon skin.  Options will be displayed as you select
      them. 

      For built-in models, the associated texture and weapon will be loaded automatically,
      through a basic sniffing algorithm.  If the algorithm fails, you can load the models
      manually from the "models" folder.

   Affine Transformations
      From this tab, you can customize the translation, rotation and scale of the model.

      For Translation and Scale, you can either click+drag the sliders, or enter a value
      manually in the spinbox beside them.

      For Rotation, click and drag on the 3D model to use the "virtual trackball".  This
      gesture is available in any tab, but is listed here for completeness.

   View Transformations
      This tab allows you to set up the camera.  Use the sliders to enter a camera location,
      look-at point and up direction.

      The widgets in this tab will be non-zero by default, as the assignment automatically
      looks-at the center of the model, and backs the camera far enough away that the entire 
      model is visible.

      You can also use the mouse wheel on the 3D model to "zoom" in and out.  This
      gesture is available in any tab, but is listed here for completeness.

   Render Options
      From this tab, you can control the following options:

      Projection Mode (Perspective/Parallel) - controls whether the model is rendered
         using a perspective or parallel (orthographic) projection.

      Shading Mode (Smooth/Flat/Wire) - controls the shading model used to render the
         model.

      Additional Display Options
         Show Normals: Draws normal vectors as lines.  Vertex normals appear in blue,
                       face normals in green.

         Use Hand-Written Math: Toggle use of hand-written view and transformation math,
                                implementing bonus requirements B3 and B4.

                                To prove the assignment is working correctly, this checkbox
                                should appear to do nothing.  If it screws things up instead,
                                then my math is broken.

         Alternative Rendering Mode: In the spirit of Halloween, you can render the model as
                                     a spooky ghost!

                                     Turning this on enables my alternate rendering mode, which
                                     is my implementation of bonus requirement B7.


Data-Structures Used:
   AffineMatrix
      This structure represents a four-dimensional Affine transformation matrix.  The structure
      is implemented with a simple two-dimensional array of doubles, stored in column-major
      order (e.g. element[x][y]).  This is to minimize confusion, as everything else in 
      OpenGL is "x, then y", and I get confused by row/column too easily.

   Vector
      This structure represents a simple three-dimensional vector.  The vector is stored as
      three discrete double values, 'x', 'y' and 'z'.

   OpenGlTexture
      This structure is a handle to an OpenGL texture, and primarily stores it's unique 
      texture identifier (known as a 'name' in OpenGL).  It also stores the texture's
      width and height, which are required to translate the MD2 texture coordinates
      into OpenGL texture calls.

   QList
      Provided by Qt, QList<> is a templated data structure which stores elements in either
      an array of pointers or an array of items, depending on the item's size.

      More information is available in the Qt documentation:
      http://doc.qt.digia.com/4.7/qlist.html

   QStack
      Provided by Qt, QStack<> is a templated data structure that stores elements in a
      last-in first-out data structure.  This is used primarily to implement the hand-coded
      OpenGL matrix stack, which is simply a QStack<AffineMatrix>

      More information is available in the Qt documentation:
      http://doc.qt.digia.com/4.7/qstack.html

   QMap
      Provided by Qt, QMap<> is a templated data structure that stores elements in a 
      skip-list based dictionary.  It is used primarily to store calculated normals of
      vertices and faces.

      More information is available in the Qt documentation:
      http://doc.qt.digia.com/4.7/qmap.html

Algorithms Used:
   
   Face Normal Calculation
      Face normals are calculated by finding the offsets between triangle points 0 and 1, and
      triangle points 0 and 2, then cross-producting and normalizing the result.

   Vertex Normal Calculation
      Vertex normals are calculated by determining which faces each vertex participates in, 
      and then averaging the face normals of each of these faces.

Implemented Requirements:
   I have implemented all of the required functional requirements listed in the assignment 
   description, as well as several bonus ones.

   The requirements I have implemented are listed below:

   Rendering
   - Normal Vectors - Choose Show Normals on the Render Options tab
   - Object Display - Choose Wireframe, Flat or Smooth on the Render Options tab.
   - Viewport       - The model is automatically centered.  Exact coordinates are visible
                      from the "View Transformations" tab.
   - Ground Pattern - A gear logo appears under the model's feet.  Changes on the Affine
                      Transformations tab do not affect the ground pattern.
   - Weapon Model   - The weapon is automatically loaded with the model.  A good example is
                      the "harry" model, available from the Model Selection tab.
   - Skin Textures  - The model (and associated weapon) have skins.

   Affine Transformations
   - Translation    - Available from the "Affine Transformations" tab
   - Scaling        - Available from the "Affine Transformations" tab (both Uniform and per-axis)
   - Rotation       - Click+Drag on the 3D model to use the Virtual Trackball

   View Changes
   - View location  - Available from the "View Transformations" tab
   - View direction - Available from the "View Transformations" tab
   - Up Direction   - Available from the "View Transformations" tab
   - Projection     - Available from the "Render Options" tab

   File Opening
   - User Interface - Available from the "Model Selection" tab


   I have also implemented several bonus requirements:

   - B1 - Animation                   - Animations are constantly looping
   - B3 - Transformation from Scratch - Click "Use Hand-Written Math" on the "Render Options" tab
   - B4 - Viewing from Scratch        - Click "Use Hand-Written Math" on the "Render Options" tab

   - B6 - Multiple Viewports          - Top, Front, Side and Perspective viewports are always visible
   - B7 - Alternative Rendering       - Click "Alternative Rendering Mode" on the "Render Options" tab


Reused Code:
   This assignment is entirely my own work, except for the following items:

   - md2.h / md2.cpp, downloaded from the CPSC453 Course Website, used as a requirement of this assignment.
     
     Original URL: http://pages.cpsc.ucalgary.ca/~mario/courses/453-F12/grading/a2/index.htm

   - pcx.h / pcx.cpp, downloaded from the CPSC453 Course Website, used as a requirement of this assignment.
     
     Original URL: http://pages.cpsc.ucalgary.ca/~mario/courses/453-F12/grading/a2/index.htm

   - All of the models in the models/ folder, obtained from the course website, used as a requirement
     of this assignment.
     
     Original URL: http://pages.cpsc.ucalgary.ca/~mario/courses/453-F12/grading/a2/index.htm


   In addition to the reused source code, several functions are adapted (but not copied) from 
   mathematical derivations and source code samples:

   - AffineMatrix::fromAxisAngle() is adapted from a mathematical derivation on Wikipedia

     Original URL: http://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle

   - VirtualTrackball is adapted from Erika Harrison's wonderful tutorial notes.

     Original URL: http://pages.cpsc.ucalgary.ca/~eharris/cpsc453/tut09/

